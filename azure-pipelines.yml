# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
      - master
      - Dev
      - feature/*

pool:
  name: Default
  demands: 
    - MSBuild
    - Nuget

    #-------------------------------Variables Defination-------------------------------
variables:
  # Set variabless
  ExeNamePrefix: Bamboo_
  MajorVersion: 1
  MinorVersion: 1
  NAS: \\10.91.1.12
  NAS_Path: 'N:'
  TargetPath: $(NAS)\Data\Builds\Sales Closer\
  REPO_ROOT_VAR: $(Build.Repository.LocalPath)\Source\Sales_Closer_360
  Source_code_path: $(REPO_ROOT_VAR)\Source #contain .sln
  Scripts_Path: $(Build.SourcesDirectory)\scripts
  Product_version: 1.0.0.390
  SCLIB_PATH: $(REPO_ROOT_VAR)\Libraries #used inside msbuild config file too
  Smart_Assembly_Path_dir: \"C:\\Program Files\\Red Gate\\SmartAssembly 7\\SmartAssembly.com\"
  Bash: '"C:\Program Files\Git\bin\bash.exe" --noprofile --norc'
  # Variable Task for Version and Build Config
  SalesCloserCSLog: $(REPO_ROOT_VAR)\SalesCloserCodeWarning.log
  SalesCloserCSWarningConfig: ' -fl -flp:logfile=$(SalesCloserCSLog);verbosity=quiet'
  REPOVERSION: 03d94d37940249d7f5f4b44ed21a69996a5ece4d
   #-------------------------------Repo(s) Defination------------------------------
# resources:
#   repositories:
#     - repository: sc360
#       type: git
#       ref: refs/heads/master
#       endpoint: C:\Users\abhishek.chaudhary\Documents\All Repos\salescloser360



stages:
  - stage: SC_Checkout           #sc from remote
    jobs:
      - job: Clone_form_Local    #sc360 from parent local to local. temp
        steps:
          - checkout: self
            clean: false
            path: $(Build.SourceBranch)
          - task: CmdLine@2
            inputs:
              script: '$(Bash) $(Scripts_Path)\clone_repo.sh'

  - stage: Compile_SC360         #Complie and build msnuild and nuget
    dependsOn: SC_Checkout
    jobs:
      - job: Restore_Packages_and_Build
        steps:
          - checkout: none
          - task: MSBuild@1
            inputs:
              solution: $(Source_code_path)/*.sln
              msbuildArguments: -p:Configuration="Release" -p:Platform=x64 -t:Rebuild -r
  
      - job: Update_Version        #verpactch.exe
        dependsOn: Restore_Packages_and_Build
        steps:
          - checkout: none
          - task: CmdLine@2
            inputs:
              workingDirectory: $(Source_code_path)/MainWindow/bin/Release
              script: verpatch.exe SalesCloser360.exe $(Product_version) /pv $(Product_version)

  - stage: Run_Smart_Assembly       #SmartAssmbly from cmd
    dependsOn: Compile_SC360
    jobs:
      - job: Build_Smart_Assembly_project
        steps:
          - checkout: none
          - task: CmdLine@2
            inputs:
              script: '"C:\Program Files\Red Gate\SmartAssembly 7\SmartAssembly.com" SalesCloser360.saproj'
              workingDirectory: $(REPO_ROOT_VAR)\Build\SmartAssembly
      - job: Copy_Config_file          #after S.A. copy config.exe
        dependsOn: Build_Smart_Assembly_project
        steps:
          - checkout: none
          - task: CmdLine@2
            inputs:
              workingDirectory: $(Source_code_path)/MainWindow/bin/Release
              script: copy "SalesCloser360.exe.config" "Sales Closer 360.exe.config"
  
  - stage: Sign_EXE                   #sign tool
    dependsOn: Run_Smart_Assembly
    jobs:
      - job: Run_Signtool_and_sign_SC_executable
        steps:
          - checkout: none
          - task: PowerShell@2
            inputs:
              filePath: $(Scripts_Path)\sign.ps1
              arguments: $(SCLIB_PATH) $(REPO_ROOT_VAR)

  - stage: Build_Installer      #current license na on r3
    dependsOn: Sign_EXE
    jobs:
      - job: Generate_MsBuild_warning_Table
        steps:
          - checkout: none
          - task: PowerShell@2
            inputs:
              filePath: $(Scripts_Path)\generate_msbuild_warning_table.ps1
              arguments: $(Build.SourcesDirectory)
